"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/schema-files-loader.ts
var schema_files_loader_exports = {};
__export(schema_files_loader_exports, {
  loadRelatedSchemaFiles: () => loadRelatedSchemaFiles,
  loadSchemaFiles: () => loadSchemaFiles
});
module.exports = __toCommonJS(schema_files_loader_exports);
var import_node_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
async function loadSchemaFiles(folderPath) {
  const dirEntries = await import_fs_extra.default.readdir(folderPath);
  const validatedList = await Promise.all(
    dirEntries.map((filePath) => validateFilePath(import_node_path.default.join(folderPath, filePath)))
  );
  return validatedList.reduce((acc, entry) => {
    if (entry.valid) {
      acc.push([entry.fullPath, entry.content]);
    }
    return acc;
  }, []);
}
async function validateFilePath(fullPath) {
  if (import_node_path.default.extname(fullPath) !== ".prisma") {
    return { valid: false };
  }
  const stat = await import_fs_extra.default.lstat(fullPath);
  if (stat.isFile()) {
    return { valid: true, fullPath, content: await import_fs_extra.default.readFile(fullPath, "utf8") };
  }
  if (stat.isSymbolicLink()) {
    const realPath = await import_fs_extra.default.realpath(fullPath);
    const realPathStat = await import_fs_extra.default.stat(realPath);
    if (realPathStat.isFile()) {
      return { valid: true, fullPath: realPath, content: await import_fs_extra.default.readFile(realPath, "utf8") };
    }
    return { valid: false };
  }
  return { valid: false };
}
function loadRelatedSchemaFiles(filesPath) {
  return loadSchemaFiles(import_node_path.default.dirname(filesPath));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  loadRelatedSchemaFiles,
  loadSchemaFiles
});

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_TPWAK4BS_exports = {};
__export(chunk_TPWAK4BS_exports, {
  MigrateCommand: () => MigrateCommand,
  init_MigrateCommand: () => init_MigrateCommand
});
module.exports = __toCommonJS(chunk_TPWAK4BS_exports);
var import_chunk_F7KSWWYN = require("./chunk-F7KSWWYN.js");
var import_chunk_FVJ3R4NJ = require("./chunk-FVJ3R4NJ.js");
var import_internals = require("@prisma/internals");
var _MigrateCommand, MigrateCommand;
var init_MigrateCommand = (0, import_chunk_FVJ3R4NJ.__esm)({
  "src/commands/MigrateCommand.ts"() {
    (0, import_chunk_F7KSWWYN.init_colors)();
    _MigrateCommand = class _MigrateCommand2 {
      constructor(cmds) {
        this.cmds = cmds;
      }
      static new(cmds) {
        return new _MigrateCommand2(cmds);
      }
      /* eslint-disable-next-line @typescript-eslint/require-await */
      async parse(argv) {
        const args = (0, import_internals.arg)(argv, {
          "--help": Boolean,
          "-h": "--help",
          "--preview-feature": Boolean,
          "--telemetry-information": String
        });
        if ((0, import_internals.isError)(args)) {
          return this.help(args.message);
        }
        if (args._.length === 0 || args["--help"]) {
          return this.help();
        }
        const commandName = args._[0];
        const cmd = this.cmds[commandName];
        if (cmd) {
          let argsForCmd;
          if (commandName === "diff") {
            argsForCmd = args["--preview-feature"] ? [...args._.slice(1), `--preview-feature`] : args._.slice(1);
          } else {
            const filteredArgs = args._.filter((item) => item !== "--preview-feature");
            argsForCmd = filteredArgs.slice(1);
          }
          return cmd.parse(argsForCmd);
        }
        return (0, import_internals.unknownCommand)(_MigrateCommand2.help, commandName);
      }
      help(error) {
        if (error) {
          return new import_internals.HelpError(`
${(0, import_chunk_F7KSWWYN.bold)((0, import_chunk_F7KSWWYN.red)(`!`))} ${error}
${_MigrateCommand2.help}`);
        }
        return _MigrateCommand2.help;
      }
    };
    _MigrateCommand.help = (0, import_internals.format)(`
Update the database schema with migrations
  
${(0, import_chunk_F7KSWWYN.bold)("Usage")}

  ${(0, import_chunk_F7KSWWYN.dim)("$")} prisma migrate [command] [options]

${(0, import_chunk_F7KSWWYN.bold)("Commands for development")}

         dev   Create a migration from changes in Prisma schema, apply it to the database
               trigger generators (e.g. Prisma Client)
       reset   Reset your database and apply all migrations, all data will be lost

${(0, import_chunk_F7KSWWYN.bold)("Commands for production/staging")}

      deploy   Apply pending migrations to the database 
      status   Check the status of your database migrations
     resolve   Resolve issues with database migrations, i.e. baseline, failed migration, hotfix

${(0, import_chunk_F7KSWWYN.bold)("Command for any stage")}

        diff   Compare the database schema from two arbitrary sources

${(0, import_chunk_F7KSWWYN.bold)("Options")}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

${(0, import_chunk_F7KSWWYN.bold)("Examples")}

  Create a migration from changes in Prisma schema, apply it to the database, trigger generators (e.g. Prisma Client)
  ${(0, import_chunk_F7KSWWYN.dim)("$")} prisma migrate dev

  Reset your database and apply all migrations
  ${(0, import_chunk_F7KSWWYN.dim)("$")} prisma migrate reset

  Apply pending migrations to the database in production/staging
  ${(0, import_chunk_F7KSWWYN.dim)("$")} prisma migrate deploy

  Check the status of migrations in the production/staging database
  ${(0, import_chunk_F7KSWWYN.dim)("$")} prisma migrate status

  Specify a schema
  ${(0, import_chunk_F7KSWWYN.dim)("$")} prisma migrate status --schema=./schema.prisma

  Compare the database schema from two databases and render the diff as a SQL script
  ${(0, import_chunk_F7KSWWYN.dim)("$")} prisma migrate diff \\
    --from-url "$DATABASE_URL" \\
    --to-url "postgresql://login:password@localhost:5432/db" \\
    --script
`);
    MigrateCommand = _MigrateCommand;
  }
});

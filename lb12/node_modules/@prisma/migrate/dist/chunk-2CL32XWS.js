"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_2CL32XWS_exports = {};
__export(chunk_2CL32XWS_exports, {
  DbDropNeedsForceError: () => DbDropNeedsForceError,
  DbPushIgnoreWarningsWithFlagError: () => DbPushIgnoreWarningsWithFlagError,
  MigrateDevEnvNonInteractiveError: () => MigrateDevEnvNonInteractiveError,
  MigrateNeedsForceError: () => MigrateNeedsForceError,
  MigrateResetEnvNonInteractiveError: () => MigrateResetEnvNonInteractiveError,
  NoSchemaFoundError: () => NoSchemaFoundError,
  init_errors: () => init_errors
});
module.exports = __toCommonJS(chunk_2CL32XWS_exports);
var import_chunk_F7KSWWYN = require("./chunk-F7KSWWYN.js");
var import_chunk_FVJ3R4NJ = require("./chunk-FVJ3R4NJ.js");
var import_internals = require("@prisma/internals");
var NoSchemaFoundError, DbPushIgnoreWarningsWithFlagError, MigrateNeedsForceError, MigrateResetEnvNonInteractiveError, MigrateDevEnvNonInteractiveError, DbDropNeedsForceError;
var init_errors = (0, import_chunk_FVJ3R4NJ.__esm)({
  "src/utils/errors.ts"() {
    (0, import_chunk_F7KSWWYN.init_colors)();
    NoSchemaFoundError = class extends Error {
      constructor() {
        super(
          `Could not find a ${(0, import_chunk_F7KSWWYN.bold)(
            "schema.prisma"
          )} file that is required for this command.
You can either provide it with ${(0, import_chunk_F7KSWWYN.green)(
            "--schema"
          )}, set it as \`prisma.schema\` in your package.json or put it into the default location ${(0, import_chunk_F7KSWWYN.green)(
            "./prisma/schema.prisma"
          )} ${(0, import_internals.link)("https://pris.ly/d/prisma-schema-location")}`
        );
      }
    };
    (0, import_internals.setClassName)(NoSchemaFoundError, "NoSchemaFoundError");
    DbPushIgnoreWarningsWithFlagError = class extends Error {
      constructor() {
        super(
          `Use the --accept-data-loss flag to ignore the data loss warnings like ${(0, import_chunk_F7KSWWYN.bold)(
            (0, import_chunk_F7KSWWYN.green)((0, import_internals.getCommandWithExecutor)("prisma db push --accept-data-loss"))
          )}`
        );
      }
    };
    (0, import_internals.setClassName)(DbPushIgnoreWarningsWithFlagError, "DbPushIgnoreWarningsWithFlagError");
    MigrateNeedsForceError = class extends Error {
      constructor(subcommand) {
        super(
          `Use the --force flag to use the ${subcommand} command in an unattended environment like ${(0, import_chunk_F7KSWWYN.bold)(
            (0, import_chunk_F7KSWWYN.green)((0, import_internals.getCommandWithExecutor)(`prisma migrate ${subcommand} --force`))
          )}`
        );
      }
    };
    (0, import_internals.setClassName)(MigrateNeedsForceError, "MigrateNeedsForceError");
    MigrateResetEnvNonInteractiveError = class extends Error {
      constructor() {
        super(
          `Prisma Migrate has detected that the environment is non-interactive. It is recommended to run this command in an interactive environment.

Use ${(0, import_chunk_F7KSWWYN.bold)((0, import_chunk_F7KSWWYN.green)(`--force`))} to run this command without user interaction.
See ${(0, import_internals.link)("https://www.prisma.io/docs/reference/api-reference/command-reference#migrate-reset")}`
        );
      }
    };
    (0, import_internals.setClassName)(MigrateResetEnvNonInteractiveError, "MigrateResetEnvNonInteractiveError");
    MigrateDevEnvNonInteractiveError = class extends Error {
      constructor() {
        super(
          `Prisma Migrate has detected that the environment is non-interactive, which is not supported.

\`prisma migrate dev\` is an interactive command designed to create new migrations and evolve the database in development.
To apply existing migrations in deployments, use ${(0, import_chunk_F7KSWWYN.bold)((0, import_chunk_F7KSWWYN.green)(`prisma migrate deploy`))}.
See ${(0, import_internals.link)("https://www.prisma.io/docs/reference/api-reference/command-reference#migrate-deploy")}`
        );
      }
    };
    (0, import_internals.setClassName)(MigrateDevEnvNonInteractiveError, "MigrateDevEnvNonInteractiveError");
    DbDropNeedsForceError = class extends Error {
      constructor(subcommand) {
        super(
          `Use the --force flag to use the ${subcommand} command in an unattended environment like ${(0, import_chunk_F7KSWWYN.bold)(
            (0, import_chunk_F7KSWWYN.green)((0, import_internals.getCommandWithExecutor)(`prisma db ${subcommand} --force --preview-feature`))
          )}`
        );
      }
    };
    (0, import_internals.setClassName)(DbDropNeedsForceError, "DbDropNeedsForceError");
  }
});

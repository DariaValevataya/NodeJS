"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_RZTB5DRB_exports = {};
__export(chunk_RZTB5DRB_exports, {
  MigrateDeploy: () => MigrateDeploy,
  init_MigrateDeploy: () => init_MigrateDeploy
});
module.exports = __toCommonJS(chunk_RZTB5DRB_exports);
var import_chunk_YUDCPOWB = require("./chunk-YUDCPOWB.js");
var import_chunk_N4SUUPKJ = require("./chunk-N4SUUPKJ.js");
var import_chunk_2UI7ST4X = require("./chunk-2UI7ST4X.js");
var import_chunk_KN4LH54K = require("./chunk-KN4LH54K.js");
var import_chunk_PZ4BRULM = require("./chunk-PZ4BRULM.js");
var import_chunk_F7KSWWYN = require("./chunk-F7KSWWYN.js");
var import_chunk_FVJ3R4NJ = require("./chunk-FVJ3R4NJ.js");
var import_debug = __toESM(require("@prisma/debug"));
var import_internals = require("@prisma/internals");
var debug, _MigrateDeploy, MigrateDeploy;
var init_MigrateDeploy = (0, import_chunk_FVJ3R4NJ.__esm)({
  "src/commands/MigrateDeploy.ts"() {
    (0, import_chunk_F7KSWWYN.init_colors)();
    (0, import_chunk_N4SUUPKJ.init_Migrate)();
    (0, import_chunk_PZ4BRULM.init_ensureDatabaseExists)();
    (0, import_chunk_2UI7ST4X.init_getSchemaPathAndPrint)();
    (0, import_chunk_KN4LH54K.init_printDatasource)();
    (0, import_chunk_YUDCPOWB.init_printFiles)();
    debug = (0, import_debug.default)("prisma:migrate:deploy");
    _MigrateDeploy = class _MigrateDeploy2 {
      static new() {
        return new _MigrateDeploy2();
      }
      async parse(argv) {
        const args = (0, import_internals.arg)(
          argv,
          {
            "--help": Boolean,
            "-h": "--help",
            "--schema": String,
            "--telemetry-information": String
          },
          false
        );
        if ((0, import_internals.isError)(args)) {
          return this.help(args.message);
        }
        await (0, import_internals.checkUnsupportedDataProxy)("migrate deploy", args, true);
        if (args["--help"]) {
          return this.help();
        }
        (0, import_internals.loadEnvFile)({ schemaPath: args["--schema"], printMessage: true });
        const schemaPath = await (0, import_chunk_2UI7ST4X.getSchemaPathAndPrint)(args["--schema"]);
        (0, import_chunk_KN4LH54K.printDatasource)({ datasourceInfo: await (0, import_chunk_PZ4BRULM.getDatasourceInfo)({ schemaPath }) });
        const migrate = new import_chunk_N4SUUPKJ.Migrate(schemaPath);
        try {
          const wasDbCreated = await (0, import_chunk_PZ4BRULM.ensureDatabaseExists)("apply", schemaPath);
          if (wasDbCreated) {
            process.stdout.write("\n" + wasDbCreated + "\n");
          }
        } catch (e) {
          process.stdout.write("\n");
          throw e;
        }
        const listMigrationDirectoriesResult = await migrate.listMigrationDirectories();
        debug({ listMigrationDirectoriesResult });
        process.stdout.write("\n");
        if (listMigrationDirectoriesResult.migrations.length > 0) {
          const migrations = listMigrationDirectoriesResult.migrations;
          process.stdout.write(
            `${migrations.length} migration${migrations.length > 1 ? "s" : ""} found in prisma/migrations
`
          );
        } else {
          process.stdout.write(`No migration found in prisma/migrations
`);
        }
        let migrationIds;
        try {
          process.stdout.write("\n");
          const { appliedMigrationNames } = await migrate.applyMigrations();
          migrationIds = appliedMigrationNames;
        } finally {
          migrate.stop();
        }
        process.stdout.write("\n");
        if (migrationIds.length === 0) {
          return (0, import_chunk_F7KSWWYN.green)(`No pending migrations to apply.`);
        } else {
          return `The following migration(s) have been applied:

${(0, import_chunk_YUDCPOWB.printFilesFromMigrationIds)(
            "migrations",
            migrationIds,
            {
              "migration.sql": ""
            }
          )}
      
${(0, import_chunk_F7KSWWYN.green)("All migrations have been successfully applied.")}`;
        }
      }
      help(error) {
        if (error) {
          return new import_internals.HelpError(`
${(0, import_chunk_F7KSWWYN.bold)((0, import_chunk_F7KSWWYN.red)(`!`))} ${error}
${_MigrateDeploy2.help}`);
        }
        return _MigrateDeploy2.help;
      }
    };
    _MigrateDeploy.help = (0, import_internals.format)(`
Apply pending migrations to update the database schema in production/staging

${(0, import_chunk_F7KSWWYN.bold)("Usage")}

  ${(0, import_chunk_F7KSWWYN.dim)("$")} prisma migrate deploy [options]

${(0, import_chunk_F7KSWWYN.bold)("Options")}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

${(0, import_chunk_F7KSWWYN.bold)("Examples")}

  Deploy your pending migrations to your production/staging database
  ${(0, import_chunk_F7KSWWYN.dim)("$")} prisma migrate deploy

  Specify a schema
  ${(0, import_chunk_F7KSWWYN.dim)("$")} prisma migrate deploy --schema=./schema.prisma

`);
    MigrateDeploy = _MigrateDeploy;
  }
});

#!/usr/bin/env tsx
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bin_exports = {};
__export(bin_exports, {
  default: () => bin_default
});
module.exports = __toCommonJS(bin_exports);
var import_chunk_FHJRHYHR = require("./chunk-FHJRHYHR.js");
var import_chunk_XBWMLPPF = require("./chunk-XBWMLPPF.js");
var import_chunk_4BW6ALH2 = require("./chunk-4BW6ALH2.js");
var import_chunk_GJIHFZPP = require("./chunk-GJIHFZPP.js");
var import_chunk_YUFISZ2D = require("./chunk-YUFISZ2D.js");
var import_chunk_FFH3N6HC = require("./chunk-FFH3N6HC.js");
var import_chunk_VC3D5JQQ = require("./chunk-VC3D5JQQ.js");
var import_chunk_4YZACD2P = require("./chunk-4YZACD2P.js");
var import_chunk_GJFFELEI = require("./chunk-GJFFELEI.js");
var import_chunk_QEHB4OUG = require("./chunk-QEHB4OUG.js");
var import_chunk_IETRW24Z = require("./chunk-IETRW24Z.js");
var import_chunk_IB56RZLF = require("./chunk-IB56RZLF.js");
var import_chunk_ANJEJWCS = require("./chunk-ANJEJWCS.js");
var import_chunk_GTSP4NED = require("./chunk-GTSP4NED.js");
var import_chunk_TPWAK4BS = require("./chunk-TPWAK4BS.js");
var import_chunk_RZTB5DRB = require("./chunk-RZTB5DRB.js");
var import_chunk_ACAEBQHN = require("./chunk-ACAEBQHN.js");
var import_chunk_I2S32KNI = require("./chunk-I2S32KNI.js");
var import_chunk_SECIXPGB = require("./chunk-SECIXPGB.js");
var import_chunk_DVU2WADI = require("./chunk-DVU2WADI.js");
var import_chunk_YUDCPOWB = require("./chunk-YUDCPOWB.js");
var import_chunk_4O5LXQ62 = require("./chunk-4O5LXQ62.js");
var import_chunk_ENSUX2GR = require("./chunk-ENSUX2GR.js");
var import_chunk_QLSD6SNV = require("./chunk-QLSD6SNV.js");
var import_chunk_YFGGO27B = require("./chunk-YFGGO27B.js");
var import_chunk_N4SUUPKJ = require("./chunk-N4SUUPKJ.js");
var import_chunk_LF5URVGZ = require("./chunk-LF5URVGZ.js");
var import_chunk_NS3ORO5H = require("./chunk-NS3ORO5H.js");
var import_chunk_AYRKWF7U = require("./chunk-AYRKWF7U.js");
var import_chunk_B6HAG5FE = require("./chunk-B6HAG5FE.js");
var import_chunk_ZNVXC2GC = require("./chunk-ZNVXC2GC.js");
var import_chunk_5KFYB5L6 = require("./chunk-5KFYB5L6.js");
var import_chunk_2UI7ST4X = require("./chunk-2UI7ST4X.js");
var import_chunk_KN4LH54K = require("./chunk-KN4LH54K.js");
var import_chunk_PZ4BRULM = require("./chunk-PZ4BRULM.js");
var import_chunk_2CL32XWS = require("./chunk-2CL32XWS.js");
var import_chunk_F7KSWWYN = require("./chunk-F7KSWWYN.js");
var import_chunk_FVJ3R4NJ = require("./chunk-FVJ3R4NJ.js");
var import_debug = __toESM(require("@prisma/debug"));
var import_engines_version = require("@prisma/engines-version");
var import_internals = require("@prisma/internals");
var require_bin = (0, import_chunk_FVJ3R4NJ.__commonJS)({
  "src/bin.ts"(exports, module) {
    (0, import_chunk_F7KSWWYN.init_colors)();
    (0, import_chunk_FHJRHYHR.init_CLI)();
    (0, import_chunk_5KFYB5L6.init_DbCommand)();
    (0, import_chunk_FFH3N6HC.init_DbExecute)();
    (0, import_chunk_VC3D5JQQ.init_DbPull)();
    (0, import_chunk_ANJEJWCS.init_DbPush)();
    (0, import_chunk_GTSP4NED.init_DbSeed)();
    (0, import_chunk_TPWAK4BS.init_MigrateCommand)();
    (0, import_chunk_RZTB5DRB.init_MigrateDeploy)();
    (0, import_chunk_ACAEBQHN.init_MigrateDev)();
    (0, import_chunk_QLSD6SNV.init_MigrateDiff)();
    (0, import_chunk_4BW6ALH2.init_MigrateReset)();
    (0, import_chunk_GJIHFZPP.init_MigrateResolve)();
    (0, import_chunk_YUFISZ2D.init_MigrateStatus)();
    (0, import_chunk_XBWMLPPF.init_getDatabaseVersionSafe)();
    process.on("uncaughtException", (e) => {
      console.log(e);
    });
    process.on("unhandledRejection", (e, promise) => {
      console.log(String(e), String(promise));
    });
    process.once("SIGINT", () => {
      process.exit(130);
    });
    var commandArray = process.argv.slice(2);
    var packageJson = eval(`require('../package.json')`);
    async function main() {
      const cli = import_chunk_FHJRHYHR.CLI.new({
        migrate: import_chunk_TPWAK4BS.MigrateCommand.new({
          dev: import_chunk_ACAEBQHN.MigrateDev.new(),
          status: import_chunk_YUFISZ2D.MigrateStatus.new(),
          resolve: import_chunk_GJIHFZPP.MigrateResolve.new(),
          reset: import_chunk_4BW6ALH2.MigrateReset.new(),
          deploy: import_chunk_RZTB5DRB.MigrateDeploy.new(),
          diff: import_chunk_QLSD6SNV.MigrateDiff.new()
        }),
        db: import_chunk_5KFYB5L6.DbCommand.new({
          execute: import_chunk_FFH3N6HC.DbExecute.new(),
          pull: import_chunk_VC3D5JQQ.DbPull.new(),
          push: import_chunk_ANJEJWCS.DbPush.new(),
          // drop: DbDrop.new(),
          seed: import_chunk_GTSP4NED.DbSeed.new()
        })
      });
      const result = await cli.parse(commandArray);
      if (result instanceof import_internals.HelpError) {
        console.error(result);
        return 1;
      } else if ((0, import_internals.isError)(result)) {
        console.error(result);
        return 1;
      }
      console.log(result);
      return 0;
    }
    main().then((code) => {
      if (code !== 0) {
        process.exit(code);
      }
    }).catch((error) => {
      if (error.rustStack) {
        (0, import_internals.handlePanic)({
          error,
          cliVersion: packageJson.version,
          enginesVersion: import_engines_version.enginesVersion,
          command: commandArray.join(" "),
          getDatabaseVersionSafe: import_chunk_XBWMLPPF.getDatabaseVersionSafe
        }).catch((e) => {
          if (import_debug.default.enabled("migrate")) {
            console.error((0, import_chunk_F7KSWWYN.red)((0, import_chunk_F7KSWWYN.bold)("Error: ")) + e.stack);
          } else {
            console.error((0, import_chunk_F7KSWWYN.red)((0, import_chunk_F7KSWWYN.bold)("Error: ")) + e.message);
          }
        }).finally(() => {
          process.exit(1);
        });
      } else {
        if (import_debug.default.enabled("migrate")) {
          console.error((0, import_chunk_F7KSWWYN.red)((0, import_chunk_F7KSWWYN.bold)("Error: ")) + error.stack);
        } else {
          console.error((0, import_chunk_F7KSWWYN.red)((0, import_chunk_F7KSWWYN.bold)("Error: ")) + error.message);
        }
        process.exit(1);
      }
    });
  }
});
var bin_default = require_bin();

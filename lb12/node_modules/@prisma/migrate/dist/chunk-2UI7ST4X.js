"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var chunk_2UI7ST4X_exports = {};
__export(chunk_2UI7ST4X_exports, {
  getSchemaPathAndPrint: () => getSchemaPathAndPrint,
  init_getSchemaPathAndPrint: () => init_getSchemaPathAndPrint
});
module.exports = __toCommonJS(chunk_2UI7ST4X_exports);
var import_chunk_2CL32XWS = require("./chunk-2CL32XWS.js");
var import_chunk_F7KSWWYN = require("./chunk-F7KSWWYN.js");
var import_chunk_FVJ3R4NJ = require("./chunk-FVJ3R4NJ.js");
var import_internals = require("@prisma/internals");
var import_path = __toESM(require("path"));
async function getSchemaPathAndPrint(schemaPathProvided, postinstallCwd) {
  const cwdOptions = postinstallCwd ? { cwd: postinstallCwd } : void 0;
  const schemaPath = await (0, import_internals.getSchemaPath)(schemaPathProvided, cwdOptions);
  if (!schemaPath) {
    if (postinstallCwd) {
      import_internals.logger.warn(`We could not find your Prisma schema at \`prisma/schema.prisma\`.
If you have a Prisma schema file in a custom path, you will need to run
\`prisma generate --schema=./path/to/your/schema.prisma\` to generate Prisma Client.
If you do not have a Prisma schema file yet, you can ignore this message.`);
      return "";
    }
    throw new import_chunk_2CL32XWS.NoSchemaFoundError();
  }
  process.stdout.write((0, import_chunk_F7KSWWYN.dim)(`Prisma schema loaded from ${import_path.default.relative(process.cwd(), schemaPath)}`) + "\n");
  return schemaPath;
}
var init_getSchemaPathAndPrint = (0, import_chunk_FVJ3R4NJ.__esm)({
  "src/utils/getSchemaPathAndPrint.ts"() {
    (0, import_chunk_F7KSWWYN.init_colors)();
    (0, import_chunk_2CL32XWS.init_errors)();
  }
});
